}
as.data.frame(pwr)
}
alpha = c(0.01,0.05,0.10)
power = get_power(data_sigma1, alpha)
power
get_power = function(data, alpha, beta_1){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
failure = rep(0, ncol(data))
for (i in 1: ncol(data)){
failure[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = failure/nrow(data)
print(j)
print(failure/nrow(data))
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
power = get_power(data_sigma1, alpha)
get_power = function(data, alpha){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
failure = rep(0, ncol(data))
for (i in 1: ncol(data)){
failure[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = failure/nrow(data)
print(j)
print(failure/nrow(data))
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
power = get_power(data_sigma1, alpha)
power
num_sims = 1000 # number of simulations
num_sims = 1000 # number of simulations
x_values = seq(0, 5, length = 25)
n        = length(x_values)   # sample size
alpha    = c(0.01,0.05,0.10)
beta_1   = seq(0, 3, .1)
data_sigma1  = simulate3(1000, 1)
power_sigma1 = get_power(data_sigma1, alpha)
data_sigma2  = simulate3(1000, 2)
power_sigma2 = get_power(data_sigma2, alpha)
data_sigma3  = simulate3(1000, 2)
num_sims = 1000 # number of simulations
x_values = seq(0, 5, length = 25)
n        = length(x_values)   # sample size
alpha    = c(0.01,0.05,0.10)
beta_1   = seq(0, 3, .1)
p_value  = rep(0, length(beta_1))
simulate3 = function(num_sim, sigma){
p_values = matrix(0, num_sim,  length(beta_1))
for(sim in 1: num_sim){
for(i in 1:length(beta_1)) {
signal   = x_values * beta_1[i]
eps      = rnorm(25, mean= 0, sd = sigma)
y        = signal + eps
fit      = lm(y ~ x_values)
p_value[i] = summary(fit)$coefficients[2,4]
}
p_values[sim, ]  = p_value
}
as.data.frame(p_values)
}
get_power = function(data, alpha){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
failure = rep(0, ncol(data))
for (i in 1: ncol(data)){
failure[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = failure/nrow(data)
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
data_sigma1  = simulate3(1000, 1)
power_sigma1 = get_power(data_sigma1, alpha)
data_sigma2  = simulate3(1000, 2)
power_sigma2 = get_power(data_sigma2, alpha)
data_sigma3  = simulate3(1000, 2)
power_sigma3 = get_power(data_sigma2, alpha)
num_sims = 1000 # number of simulations
x_values = seq(0, 5, length = 25)
n        = length(x_values)   # sample size
alpha    = c(0.01,0.05,0.10)
beta_1   = seq(0, 3, .1)
p_value  = rep(0, length(beta_1))
simulate3 = function(num_sim, sigma){
p_values = matrix(0, num_sim,  length(beta_1))
for(sim in 1: num_sim){
for(i in 1:length(beta_1)) {
signal   = x_values * beta_1[i]
eps      = rnorm(25, mean= 0, sd = sigma)
y        = signal + eps
fit      = lm(y ~ x_values)
p_value[i] = summary(fit)$coefficients[2,4]
}
p_values[sim, ]  = p_value
}
as.data.frame(p_values)
}
get_power = function(data, alpha){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
failure = rep(0, ncol(data))
for (i in 1: ncol(data)){
failure[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = failure/nrow(data)
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
get_power = function(data, alpha){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
rejectHo = rep(0, ncol(data))
for (i in 1: ncol(data)){
rejectHo[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = rejectHo/nrow(data)
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
get_power = function(data, alpha){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
rejectHo = rep(0, ncol(data))
for (i in 1: ncol(data)){
#we should reject Ho when beta > 0
rejectHo[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = rejectHo/nrow(data)
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
data_sigma1  = simulate3(1000, 1)
power_sigma1 = get_power(data_sigma1, alpha)
data_sigma2  = simulate3(1000, 2)
power_sigma2 = get_power(data_sigma2, alpha)
data_sigma3  = simulate3(1000, 2)
power_sigma3 = get_power(data_sigma2, alpha)
power_sigma1
power_sigma2
power_sigma3
data_sigma3  = simulate3(1000, 4)
power_sigma3
power_sigma3 = get_power(data_sigma2, alpha)
power_sigma3
power_sigma2
power_sigma3
power_sigma1
power_sigma2
power_sigma3
birthday = 19810803
set.seed(birthday)
num_sims = 1000 # number of simulations
x_values = seq(0, 5, length = 25)
n        = length(x_values)   # sample size
alpha    = c(0.01,0.05,0.10)
beta_1   = seq(0, 3, .1)
p_value  = rep(0, length(beta_1))
simulate3 = function(num_sim, sigma){
p_values = matrix(0, num_sim,  length(beta_1))
for(sim in 1: num_sim){
for(i in 1:length(beta_1)) {
signal   = x_values * beta_1[i]
eps      = rnorm(25, mean= 0, sd = sigma)
y        = signal + eps
fit      = lm(y ~ x_values)
p_value[i] = summary(fit)$coefficients[2,4]
}
p_values[sim, ]  = p_value
}
as.data.frame(p_values)
}
get_power = function(data, alpha){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
rejectHo = rep(0, ncol(data))
for (i in 1: ncol(data)){
#we should reject Ho when beta > 0
rejectHo[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = rejectHo/nrow(data)
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
data_sigma1  = simulate3(10000, 1)
data_sigma1  = simulate3(1000, 1)
birthday = 19810803
set.seed(birthday)
num_sims = 1000 # number of simulations
x_values = seq(0, 5, length = 25)
n        = length(x_values)   # sample size
alpha    = c(0.01,0.05,0.10)
beta_1   = seq(0, 3, .1)
p_value  = rep(0, length(beta_1))
simulate3 = function(num_sim, sigma){
p_values = matrix(0, num_sim,  length(beta_1))
for(sim in 1: num_sim){
for(i in 1:length(beta_1)) {
signal   = x_values * beta_1[i]
eps      = rnorm(25, mean= 0, sd = sigma)
y        = signal + eps
fit      = lm(y ~ x_values)
p_value[i] = summary(fit)$coefficients[2,4]
}
p_values[sim, ]  = p_value
}
as.data.frame(p_values)
}
get_power = function(data, alpha){
pwr = matrix(0, nrow = length(alpha), ncol = ncol(data))
for (j in 1: length(alpha)){
rejectHo = rep(0, ncol(data))
for (i in 1: ncol(data)){
#we should reject Ho when beta > 0
rejectHo[i] = sum(data[ , i] < alpha[j])
}
pwr[ j ,  ] = rejectHo/nrow(data)
}
pwr = as.data.frame(pwr)
colnames(pwr) = beta_1
pwr
}
data_sigma1  = simulate3(1000, 1)
power_sigma1 = get_power(data_sigma1, alpha)
data_sigma2  = simulate3(1000, 2)
power_sigma2 = get_power(data_sigma2, alpha)
data_sigma3  = simulate3(1000, 4)
power_sigma3 = get_power(data_sigma3, alpha)
power_sigma1
power_sigma2
power_sigma3
power_sigma1
power_sigma2
power_sigma3
power_sigma1[1, ]
plot(power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat((Power)),
main = "Simulated Regression Data"))
plot(power_sigma1[1,])
power_sigma1[1,]
values = power_sigma1[1,]
values
plot(values)
power_grid = x_values
power_grid = beta_1
power_grid
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat((Power)),
main = "Simulated Regression Data"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "dodgerblue")
lines(beta_1, power_sigma1[3, ], col = "red")
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "darkorange")
lines(beta_1, power_sigma1[3, ], col = "red")
par(mar = c(5, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "darkorange")
lines(beta_1, power_sigma1[3, ], col = "red")
legend("bottomright", c("Estimate", "Truth"), lty = c(1, 2), lwd = 2,
col = c("darkorange", "dodgerblue"))
c(0.01,0.05,0.10)
par(mar = c(5, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "darkorange")
lines(beta_1, power_sigma1[3, ], col = "red")
legend("bottomright", c(expression(alpha = 0.01 ), expression(alpha = 0.05), expression(alpha = 0.10)), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"))
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"))
par(mar = c(5, 5, 1, 5)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "darkorange")
lines(beta_1, power_sigma1[3, ], col = "red")
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"))
par(mar = c(5, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "darkorange")
lines(beta_1, power_sigma1[3, ], col = "red")
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"))
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"), adj = c(0.2, 0.6), cex=0.75))
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"), adj = c(0.2, 0.6), cex=0.75)
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"), cex=0.75)
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"), adj = c(0.2, 0.6))
par(mar = c(5, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "darkorange")
lines(beta_1, power_sigma1[3, ], col = "red")
par(mar = c(5, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power),
main = "Simulated Regression Data"))
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = "Simulated Regression Data")
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(5, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(5, 1, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(1, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(5, 5, 1, 1)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(6, 6, 6, 6)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(2, 2, 2, 2)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(3, 3, 3, 3)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(4, 4, 4, 4)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(5, 4, 4, 4)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(5, 5, 4, 4)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(5, 5, 3, 3)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
par(mar = c(5, 5, 2, 2)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma1[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 1"))
points(beta_1, power_sigma1[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma1[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma1[1, ], col = "dodgerblue")
lines(beta_1, power_sigma1[2, ], col = "darkorange")
lines(beta_1, power_sigma1[3, ], col = "red")
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"), adj = c(0.2, 0.6))
par(mar = c(5, 5, 2, 2)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma2[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 2"))
points(beta_1, power_sigma2[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma2[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma2[1, ], col = "dodgerblue")
lines(beta_1, power_sigma2[2, ], col = "darkorange")
lines(beta_1, power_sigma2[3, ], col = "red")
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"), adj = c(0.2, 0.6))
par(mar = c(5, 5, 2, 2)) # adjusted plot margins, otherwise the "hat" does not display
plot(beta_1, power_sigma3[1, ], pch = 20, col = "dodgerblue", cex = 1,
xlab = expression(hat(beta)[1] ~ "values"),
ylab = expression(hat(Power)),
main = expression(hat(Power) ~ "for " ~ sigma ~ " = 4"))
points(beta_1, power_sigma3[2, ], pch = 20, col = "darkorange", cex = 1)
points(beta_1, power_sigma3[3, ], pch = 20, col = "red", cex = 1)
lines(beta_1, power_sigma3[1, ], col = "dodgerblue")
lines(beta_1, power_sigma3[2, ], col = "darkorange")
lines(beta_1, power_sigma3[3, ], col = "red")
legend("bottomright", c(expression(alpha ~ " = 0.01" ), expression(alpha ~ "= 0.05"), expression(alpha ~ "= 0.10")), lty = 1, lwd = 2,
col = c("dodgerblue", "darkorange", "red"), adj = c(0.2, 0.6))
install.packages(gfortran)
install.packages(gfortran)
library("zoo", lib.loc="~/R/R-3.4.0/library")
library("stats", lib.loc="~/R/R-3.4.0/library")
install.packages("C:\Users\a05v6zz\Downloads\lmtest_0.9-35.tar.gz")
install.packages("C://Users//a05v6zz//Downloads//lmtest_0.9-35.tar.gz")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("car")
library(lmtest)
library(readr)
dataset_Facebook <- read_delim("dataset_Facebook.csv",
";", escape_double = FALSE, trim_ws = TRUE)
setwd("~/University of Illinois/Status 420/Final Project/Proposal V2")
dataset_Facebook <- read_delim("dataset_Facebook.csv",
";", escape_double = FALSE, trim_ws = TRUE)
model = lm(`Lifetime.Post.Consumers`` ~ ., data = dataset_Facebook)
model = lm(`Lifetime.Post.Consumers` ~ ., data = dataset_Facebook)
boxcox(model)
library(MASS)
boxcox(model)
model = lm(`Lifetime.Post.Consumers` ~ ., data = dataset_Facebook)
model = lm(dataset_Facebook$`Lifetime Post Consumers` ~ ., data = dataset_Facebook)
View(dataset_Facebook)
fb = read.table("dataset_Facebook.csv", sep = ";", header = T)
head(fb[,11])
fb$Page.total.likes
library(readr)
dataset_Facebook = read_csv("dataset_Facebook.csv")
library(readr)
dataset_Facebook <- read_csv("dataset_Facebook.csv")
library(readr)
dataset_Facebook <- read_csv("dataset_Facebook.csv")
library(readr)
dataset_Facebook <- read_csv("dataset_Facebook.csv")
library(readr)
dataset_Facebook <- read_delim("~/University of Illinois/Status 420/Final Project/Proposal V2/dataset_Facebook.csv",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
dataset_Facebook <- read_delim("~/University of Illinois/Status 420/Final Project/Proposal V2/dataset_Facebook.csv",
";", escape_double = FALSE, trim_ws = TRUE)
fb <- read_delim("~/University of Illinois/Status 420/Final Project/Proposal V2/dataset_Facebook.csv",
";", escape_double = FALSE, trim_ws = TRUE)
